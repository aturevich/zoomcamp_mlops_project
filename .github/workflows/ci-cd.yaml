name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pipenv
        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-
    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev
    - name: Run linter
      run: make lint
    - name: Check formatting
      run: pipenv run black . --check

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pipenv
        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-
    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev
    - name: Run tests
      run: make test

  build:
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
    - uses: actions/checkout@v2
    - name: Build Docker image
      run: docker build -t earthquake-prediction -f Dockerfile.api .
    - name: Run Docker image
      run: docker run earthquake-prediction echo "Docker image built and runs successfully"

  format:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pipenv
        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-
    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev
    - name: Format with black
      run: make format
    - name: Commit changes
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "Apply automatic formatting changes"
        branch: ${{ github.head_ref }}
