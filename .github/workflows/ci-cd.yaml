name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pipenv
        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-
    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev
    - name: Run linter
      run: make lint
    - name: Check formatting
      run: pipenv run black . --check

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pipenv
        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-
    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev
    - name: Run tests
      run: make test

  build:
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    strategy:
      matrix:
        include:
          - dockerfile: Dockerfile.api
            image_name: earthquake-prediction-api
          - dockerfile: Dockerfile.streamlit
            image_name: earthquake-prediction-streamlit
          - dockerfile: Dockerfile.mlflow
            image_name: earthquake-prediction-mlflow
          - dockerfile: Dockerfile.prefect
            image_name: earthquake-prediction-prefect
    steps:
    - uses: actions/checkout@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Build Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./${{ matrix.dockerfile }}
        push: false
        tags: ${{ matrix.image_name }}:latest
        outputs: type=docker,dest=/tmp/${{ matrix.image_name }}.tar
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: docker-image-${{ matrix.image_name }}
        path: /tmp/${{ matrix.image_name }}.tar

  format:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pipenv
        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-
    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev
    - name: Format with black
      run: make format
    - name: Commit changes
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "Apply automatic formatting changes"
        branch: ${{ github.head_ref }}